// Generated by IcedCoffeeScript 1.4.0c
(function() {
  var Typeselect, old,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  Typeselect = function(element, options) {
    this.$element = $(element);
    this.options = $.extend({}, $.fn.typeselect.defaults, options);
    this.matcher = this.options.matcher || this.matcher;
    this.sorter = this.options.sorter || this.sorter;
    this.highlighter = this.options.highlighter || this.highlighter;
    this.updater = this.options.updater || this.updater;
    this.source = this.options.sources || this.options.source;
    this.$menu = $(this.options.menu);
    this.shown = false;
    this.$element.attr('autocomplete', 'off');
    return this.listen();
  };

  Typeselect.prototype = {
    constructor: Typeselect,
    select: function() {
      var val;
      val = this.$menu.find('.active').attr('data-value');
      this.$element.val(this.updater(val)).change();
      return this.hide();
    },
    updater: function(item) {
      return item;
    },
    show: function() {
      var pos;
      pos = $.extend({}, this.$element.position(), {
        height: this.$element[0].offsetHeight
      });
      this.$menu.insertAfter(this.$element).css({
        top: pos.top + pos.height,
        left: pos.left
      }).show();
      this.shown = true;
      return this;
    },
    hide: function() {
      this.$menu.hide();
      this.shown = false;
      return this;
    },
    lookup: function(event) {
      var items;
      this.query = this.$element.val();
      this.$menu.empty();
      if (!this.query || this.query.length < this.options.minLength) {
        if (this.shown) {
          return this.hide();
        } else {
          return this;
        }
      }
      items = null;
      items = this.source;
      if ($.isFunction(items)) items = items(this.query);
      if (!Array.isArray(items) && typeof items === 'object') {
        this.process(items);
        return this;
      }
      if (items != null) {
        return this.process({
          '': items
        });
      }
    },
    process: function(source) {
      var header, items, list, lists, that, _i, _len;
      that = this;
      lists = (function() {
        var _results;
        _results = [];
        for (header in source) {
          items = source[header];
          if ($.isFunction(items)) items = items(this.query);
          items = $.grep(items, function(item) {
            return that.matcher(item);
          });
          items = this.sorter(items);
          if (!items.length) continue;
          _results.push(this.render(header, items.slice(0, this.options.items)));
        }
        return _results;
      }).call(this);
      if (!lists.length) {
        if (this.shown) {
          return this.hide();
        } else {
          return this;
        }
      }
      this.$menu.find('li:not(.nav-header)').first().addClass('active');
      for (_i = 0, _len = lists.length; _i < _len; _i++) {
        list = lists[_i];
        list.show();
      }
      return this;
    },
    matcher: function(item) {
      return ~item.toLowerCase().indexOf(this.query.toLowerCase());
    },
    sorter: function(items) {
      var beginswith, caseInsensitive, caseSensitive, item;
      beginswith = [];
      caseSensitive = [];
      caseInsensitive = [];
      item;
      while ((item = items.shift())) {
        if (!item.toLowerCase().indexOf(this.query.toLowerCase())) {
          beginswith.push(item);
        } else if (~item.indexOf(this.query)) {
          caseSensitive.push(item);
        } else {
          caseInsensitive.push(item);
        }
      }
      return beginswith.concat(caseSensitive, caseInsensitive);
    },
    highlighter: function(item) {
      var query;
      query = this.query.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, '\\$&');
      return item.replace(new RegExp('(' + query + ')', 'ig'), function($1, match) {
        return '<strong>' + match + '</strong>';
      });
    },
    render: function(header, items) {
      var that;
      that = this;
      items = items.map(function(item) {
        var result;
        result = $(that.options.item).attr('data-value', item);
        result.find('a').html(that.highlighter(item));
        return result[0];
      });
      if (header != null) {
        items.unshift($(that.options.header).attr('data-value', header).text(header)[0]);
      }
      items = $(items);
      this.$menu.append(items);
      return this;
    },
    next: function(event) {
      var active, next;
      active = this.$menu.find('.active').removeClass('active');
      next = active.next();
      if (next.length && next.is('.nav-header')) next = next.next();
      if (!next.length) next = $(this.$menu.find('li:not(.nav-header)')[0]);
      return next.addClass('active');
    },
    prev: function(event) {
      var active, prev;
      active = this.$menu.find('.active').removeClass('active');
      prev = active.prev();
      if (prev.length && prev.is('.nav-header')) prev = prev.prev();
      if (!prev.length) prev = this.$menu.find('li').last();
      return prev.addClass('active');
    },
    listen: function() {
      this.$element.on('blur', $.proxy(this.blur, this));
      this.$element.on('keypress', $.proxy(this.keypress, this));
      this.$element.on('keyup', $.proxy(this.keyup, this));
      if (this.eventSupported('keydown')) {
        this.$element.on('keydown', $.proxy(this.keydown, this));
      }
      this.$menu.on('click', $.proxy(this.click, this));
      return this.$menu.on('mouseenter', 'li', $.proxy(this.mouseenter, this));
    },
    eventSupported: function(eventName) {
      var isSupported;
      isSupported = __indexOf.call(this.$element, eventName) >= 0;
      if (!isSupported) {
        this.$element.attr(eventName, 'return;');
        isSupported = typeof this.$element[eventName] === 'function';
      }
      return isSupported;
    },
    move: function(e) {
      if (!this.shown) return;
      switch (e.keyCode) {
        case 9:
          e.preventDefault();
          break;
        case 13:
          e.preventDefault();
          break;
        case 27:
          e.preventDefault();
          break;
        case 38:
          e.preventDefault();
          this.prev();
          break;
        case 40:
          e.preventDefault();
          this.next();
          break;
      }
      return e.stopPropagation();
    },
    keydown: function(e) {
      this.suppressKeyPressRepeat = ~$.inArray(e.keyCode, [40, 38, 9, 13, 27]);
      return this.move(e);
    },
    keypress: function(e) {
      if (this.suppressKeyPressRepeat) return;
      return this.move(e);
    },
    keyup: function(e) {
      switch (e.keyCode) {
        case 40:
          break;
        case 38:
          break;
        case 16:
          break;
        case 17:
          break;
        case 18:
          break;
        case 9:
          if (!this.shown) return;
          this.select();
          break;
        case 13:
          if (!this.shown) return;
          this.select();
          break;
        case 27:
          if (!this.shown) return;
          this.hide();
          break;
        default:
          this.lookup();
      }
      e.stopPropagation();
      return e.preventDefault();
    },
    blur: function(e) {
      var that;
      that = this;
      return setTimeout((function() {
        return that.hide();
      }), 150);
    },
    click: function(e) {
      e.stopPropagation();
      e.preventDefault();
      return this.select();
    },
    mouseenter: function(e) {
      this.$menu.find('.active').removeClass('active');
      return $(e.currentTarget).addClass('active');
    }
  };

  old = $.fn.typeselect;

  $.fn.typeselect = function(option) {
    return this.each(function() {
      var $this, data, options;
      $this = $(this);
      data = $this.data('typeselect');
      options = typeof option === 'object' && option;
      if (!data) $this.data('typeselect', (data = new Typeselect(this, options)));
      if (typeof option === 'string') return data[option]();
    });
  };

  $.fn.typeselect.defaults = {
    source: [],
    items: 5,
    menu: '<ul class="typeselect dropdown-menu nav nav-list"></ul>',
    header: '<li class="nav-header"></li>',
    item: '<li><a href="#"></a></li>',
    minLength: 1
  };

  $.fn.typeselect.Constructor = Typeselect;

  $.fn.typeselect.noConflict = function() {
    $.fn.typeselect = old;
    return this;
  };

  $(document).on('focus.typeselect.data-api', '[data-provide="typeselect"]', function(e) {
    var $this;
    $this = $(this);
    if ($this.data('typeselect')) return;
    e.preventDefault();
    return $this.typeselect($this.data());
  });

}).call(this);
