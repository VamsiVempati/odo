// Generated by IcedCoffeeScript 1.4.0c
(function() {
  var dropbox, errors, iced, strategies, __iced_k, __iced_k_noop;

  iced = require('iced-coffee-script').iced;
  __iced_k = __iced_k_noop = function() {};

  dropbox = require('dropbox');

  errors = {
    '${dropbox.ApiError.INVALID_TOKEN}': 'Invalid token',
    '${dropbox.ApiError.NOT_FOUND}': 'Not found',
    '${dropbox.ApiError.OVER_QUOTA}': 'Over quota',
    '${dropbox.ApiError.RATE_LIMITED}': 'Rate limited',
    '${dropbox.ApiError.NETWORK_ERROR}': 'Network error',
    '${dropbox.ApiError.INVALID_PARAM}': 'Invalid parameter',
    '${dropbox.ApiError.OAUTH_ERROR}': 'OAuth Error',
    '${dropbox.ApiError.INVALID_METHOD}': 'Invalid method'
  };

  strategies = function(app) {
    return {
      'dropbox.collections': function(callback) {
        return callback(null, ['Knowledge/Patterns and Practices', 'Knowledge/Work', 'Knowledge/Brain Dump', 'Knowledge/Leader of Men']);
      },
      'dropbox.list': function(callback) {
        var client, entries, error, req, ___iced_passed_deferral, __iced_deferrals, __iced_k,
          _this = this;
        __iced_k = __iced_k_noop;
        ___iced_passed_deferral = iced.findDeferral(arguments);
        req = app.inject.one('req');
        client = app.inject.one('dropbox.client')();
        if (client == null) {
          callback(null, []);
          return;
        }
        (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/tcoats/Source/odo/dropbox-data/dropbox-data.coffee"
          });
          client.readdir(req.query.path, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                error = arguments[0];
                return entries = arguments[1];
              };
            })(),
            lineno: 32
          }));
          __iced_deferrals._fulfill();
        })(function() {
          if (typeof error !== "undefined" && error !== null) {
            callback(errors[error]);
          }
          return callback(null, entries);
        });
      }
    };
  };

  module.exports = {
    configure: function(app) {
      var implementation, strategy, _ref, _results;
      _ref = strategies(app);
      _results = [];
      for (strategy in _ref) {
        implementation = _ref[strategy];
        _results.push(app.inject.bind(strategy, implementation));
      }
      return _results;
    },
    init: function(app) {
      var strategy, _, _ref, _results;
      _ref = strategies(app);
      _results = [];
      for (strategy in _ref) {
        _ = _ref[strategy];
        _results.push(app.get("/" + strategy + ".json", function(req, res) {
          var error, output, result, ___iced_passed_deferral, __iced_deferrals, __iced_k,
            _this = this;
          __iced_k = __iced_k_noop;
          ___iced_passed_deferral = iced.findDeferral(arguments);
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/Users/tcoats/Source/odo/dropbox-data/dropbox-data.coffee"
            });
            app.inject.one(strategy)((__iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  error = arguments[0];
                  return result = arguments[1];
                };
              })(),
              lineno: 49
            })));
            __iced_deferrals._fulfill();
          })(function() {
            if (typeof error !== "undefined" && error !== null) throw error;
            output = JSON.stringify(result);
            res.set({
              'Content-Type': 'application/json',
              'Content-Length': output.length
            });
            return res.send(output);
          });
        }));
      }
      return _results;
    }
  };

}).call(this);
