// Generated by IcedCoffeeScript 1.6.3-g
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };



  define(['knockout', 'jquery', 'plugins/router', 'components/dialog', 'articles/client', 'odo/auth/twitter'], function(ko, $, router, Dialog, ArticleLogic, twitterauth) {
    var Search;
    return Search = (function() {
      function Search() {
        this.shake = __bind(this.shake, this);
        this.selectArticle = __bind(this.selectArticle, this);
        this.submit = __bind(this.submit, this);
        this.down = __bind(this.down, this);
        this.up = __bind(this.up, this);
        this.activate = __bind(this.activate, this);
        this.canActivate = __bind(this.canActivate, this);
        var _this = this;
        this.articles = ko.observableArray([]);
        this.selectedIndex = ko.observable(0);
        this.refineByText = ko.observable('');
        this.refinedArticles = ko.computed(function() {
          var articles, refineByText;
          _this.selectedIndex(0);
          articles = _this.articles();
          refineByText = _this.refineByText().toLowerCase();
          if (refineByText === '') {
            return [];
          }
          return articles.filter(function(article) {
            return article.name.toLowerCase().indexOf(refineByText) === 0;
          });
        }, this);
        this.limitedArticles = ko.computed(function() {
          return _this.refinedArticles().slice(0, 10);
        });
        this.hasMore = ko.computed(function() {
          return _this.refinedArticles().length > _this.limitedArticles().length;
        }, this);
        this.shouldShake = ko.observable(false);
        this.hasFocus = ko.observable(true);
        this.articleLogic = new ArticleLogic();
      }

      Search.prototype.canActivate = function() {
        var _this = this;
        return $.Deferred(function(deferred) {
          return twitterauth.getUser(function(err, user) {
            if (err != null) {
              deferred.resolve({
                redirect: '#welcome'
              });
              return;
            }
            return deferred.resolve(true);
          });
        }).promise();
      };

      Search.prototype.activate = function() {
        var _this = this;
        return $.Deferred(function(deferred) {
          return _this.articleLogic.getArticlesForAutocomplete().then(function(articles) {
            var article, _i, _len;
            for (_i = 0, _len = articles.length; _i < _len; _i++) {
              article = articles[_i];
              _this.articles.push(article);
            }
            return deferred.resolve();
          }).fail(function(err) {
            return deferred.reject(err);
          });
        }).promise();
      };

      Search.prototype.up = function() {
        var index;
        index = this.selectedIndex();
        index--;
        if (index < 0) {
          index = this.limitedArticles().length - 1;
        }
        return this.selectedIndex(index);
      };

      Search.prototype.down = function() {
        var index;
        index = this.selectedIndex();
        index++;
        index = index % this.limitedArticles().length;
        return this.selectedIndex(index);
      };

      Search.prototype.submit = function() {
        var article, articleName, options,
          _this = this;
        this.hasFocus(false);
        if (this.selectedIndex() < this.limitedArticles().length) {
          article = this.limitedArticles()[this.selectedIndex()];
          router.navigate(this.articleLogic.getUrlForArticle(article));
          return false;
        }
        articleName = this.refineByText().trim();
        if (articleName === '') {
          this.hasFocus(true);
          this.shake();
          return false;
        }
        options = {
          model: 'components/wizard',
          activationData: {
            model: 'views/article-create/selectlocation',
            activationData: articleName
          }
        };
        new Dialog(options).show().then(function(article) {
          if (article != null) {
            return router.navigate(_this.articleLogic.getUrlForArticle(article));
          }
        });
        return false;
      };

      Search.prototype.selectArticle = function(article) {
        var index;
        index = this.limitedArticles().indexOf(article);
        this.selectedIndex(index);
        return this.submit();
      };

      Search.prototype.shake = function() {
        var _this = this;
        this.shouldShake(true);
        return setTimeout(function() {
          return _this.shouldShake(false);
        }, 1000);
      };

      return Search;

    })();
  });

}).call(this);
