// Generated by CoffeeScript 1.6.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  define(['redis', 'odo/config'], function(redis, config) {
    var UserProfile, db;
    db = redis.createClient();
    return UserProfile = (function() {
      function UserProfile() {
        this.addOrRemoveValues = __bind(this.addOrRemoveValues, this);
        var _this = this;
        this.receive = {
          userTrackingStarted: function(event, cb) {
            var user;
            user = {
              id: event.payload.id,
              displayName: event.payload.profile.displayName
            };
            return db.hset("" + config.odo.domain + ":users", event.payload.id, JSON.stringify(user), cb);
          },
          userHasEmailAddress: function(event, cb) {
            return _this.addOrRemoveValues(event, function(user) {
              user.email = event.payload.email;
              return user;
            }, cb);
          },
          userHasDisplayName: function(event, cb) {
            return _this.addOrRemoveValues(event, function(user) {
              user.displayName = event.payload.displayName;
              return user;
            }, cb);
          },
          userHasUsername: function(event, cb) {
            return _this.addOrRemoveValues(event, function(user) {
              console.log("giving user a username " + event.payload.username);
              user.username = event.payload.username;
              return user;
            }, cb);
          },
          userTwitterConnected: function(event, cb) {
            return _this.addOrRemoveValues(event, function(user) {
              user.twitter = {
                id: event.payload.profile.id,
                profile: event.payload.profile
              };
              return user;
            }, cb);
          },
          userTwitterDisconnected: function(event, cb) {
            return _this.addOrRemoveValues(event, function(user) {
              user.twitter = null;
              return user;
            }, cb);
          },
          userFacebookConnected: function(event, cb) {
            return _this.addOrRemoveValues(event, function(user) {
              user.facebook = {
                id: event.payload.profile.id,
                profile: event.payload.profile
              };
              return user;
            }, cb);
          },
          userFacebookDisconnected: function(event, cb) {
            return _this.addOrRemoveValues(event, function(user) {
              user.facebook = null;
              return user;
            }, cb);
          },
          userGoogleConnected: function(event, cb) {
            return _this.addOrRemoveValues(event, function(user) {
              user.google = {
                id: event.payload.profile.id,
                profile: event.payload.profile
              };
              return user;
            }, cb);
          },
          userGoogleDisconnected: function(event, cb) {
            return _this.addOrRemoveValues(event, function(user) {
              user.google = null;
              return user;
            }, cb);
          },
          userHasLocalSignin: function(event, cb) {
            return _this.addOrRemoveValues(event, function(user) {
              user.local = {
                id: event.payload.id,
                profile: event.payload.profile
              };
              return user;
            }, cb);
          },
          userHasPassword: function(event, cb) {
            return _this.addOrRemoveValues(event, function(user) {
              user.local.profile.password = event.payload.password;
              return user;
            }, cb);
          },
          userLocalSigninRemoved: function(event, cb) {
            return _this.addOrRemoveValues(event, function(user) {
              user.local = null;
              return user;
            }, cb);
          }
        };
      }

      UserProfile.prototype.addOrRemoveValues = function(event, callback, cb) {
        var _this = this;
        return db.hget("" + config.odo.domain + ":users", event.payload.id, function(err, user) {
          if (err != null) {
            cb();
            return;
          }
          user = JSON.parse(user);
          user = callback(user);
          user = JSON.stringify(user, null, 4);
          return db.hset("" + config.odo.domain + ":users", event.payload.id, user, function() {
            return cb();
          });
        });
      };

      UserProfile.prototype.get = function(id, callback) {
        var _this = this;
        return db.hget("" + config.odo.domain + ":users", id, function(err, data) {
          if (err != null) {
            callback(err);
            return;
          }
          data = JSON.parse(data);
          if (data != null) {
            callback(null, data);
            return;
          }
          return setTimeout(function() {
            return db.hget("" + config.odo.domain + ":users", id, function(err, data) {
              if (err != null) {
                callback(err);
                return;
              }
              data = JSON.parse(data);
              return callback(null, data);
            });
          }, 1000);
        });
      };

      return UserProfile;

    })();
  });

}).call(this);
