// Generated by IcedCoffeeScript 1.4.0c
(function() {
  var control, fs, path, _;

  path = require('path');

  fs = require('fs');

  _ = require('underscore');

  control = {
    root: [],
    loadplugins: function(pluginspath) {
      var directory, plugin, _i, _j, _len, _len1, _ref;
      if (_.isArray(pluginspath)) {
        for (_i = 0, _len = pluginspath.length; _i < _len; _i++) {
          directory = pluginspath[_i];
          control.loadplugins(path.join(__dirname, directory));
        }
      } else {
        _ref = control.parseforplugins(pluginspath);
        for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
          plugin = _ref[_j];
          control.root.push(plugin);
        }
      }
      return control.root;
    },
    configure: function(app) {
      return control.configureplugins(app, control.root);
    },
    init: function(app) {
      return control.initplugins(app, control.root);
    },
    parseforplugins: function(pluginspath) {
      var directoryfile, plugin, plugins, _i, _len, _ref;
      plugins = [];
      if (fs.existsSync(pluginspath)) {
        _ref = fs.readdirSync(pluginspath);
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          directoryfile = _ref[_i];
          plugin = control.parseplugin(path.join(pluginspath, directoryfile));
          if (plugin != null) plugins.push(plugin);
        }
      }
      return plugins;
    },
    parseplugin: function(pluginpath) {
      var plugin, pluginfile;
      pluginfile = path.basename(pluginpath);
      plugin = {
        id: encodeURIComponent(pluginfile),
        filename: pluginfile,
        path: pluginpath
      };
      plugin.stat = fs.statSync(plugin.path);
      if (!plugin.stat.isDirectory()) return;
      plugin.configpath = path.join(plugin.path, 'plugin.json');
      if (!fs.existsSync(plugin.configpath)) return;
      plugin.config = JSON.parse(fs.readFileSync(plugin.configpath, 'utf-8'));
      plugin.pluginpath = path.normalize(path.join(plugin.path, plugin.config.main));
      if (plugin.config.disabled !== true) {
        plugin.implementation = require(plugin.pluginpath);
      }
      plugin.plugins = control.parseforplugins(plugin.path);
      return plugin;
    },
    configureplugins: function(app, plugins) {
      var plugin, _i, _len, _ref, _results;
      _results = [];
      for (_i = 0, _len = plugins.length; _i < _len; _i++) {
        plugin = plugins[_i];
        if (((_ref = plugin.implementation) != null ? _ref.configure : void 0) != null) {
          plugin.implementation.configure(app);
        }
        if (plugin.plugins != null) {
          _results.push(control.configureplugins(app, plugin.plugins));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    },
    initplugins: function(app, plugins) {
      var plugin, _i, _len, _ref, _results;
      _results = [];
      for (_i = 0, _len = plugins.length; _i < _len; _i++) {
        plugin = plugins[_i];
        if (((_ref = plugin.implementation) != null ? _ref.init : void 0) != null) {
          plugin.implementation.init(app);
        }
        if (plugin.plugins != null) {
          _results.push(control.initplugins(app, plugin.plugins));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    }
  };

  module.exports = control;

}).call(this);
