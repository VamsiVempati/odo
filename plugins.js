// Generated by IcedCoffeeScript 1.4.0c
(function() {
  var control, fs, iced, path, _, __iced_k, __iced_k_noop;

  iced = require('iced-coffee-script').iced;
  __iced_k = __iced_k_noop = function() {};

  path = require('path');

  fs = require('fs');

  _ = require('underscore');

  control = {
    root: [],
    loadplugins: function(pluginspath, cb) {
      var directory, directorypath, plugin, plugins, pluginspaths, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      pluginspaths = pluginspath;
      if (!_.isArray(pluginspath)) pluginspaths = [pluginspaths];
      (function(__iced_k) {
        var _i, _len, _ref, _results, _while;
        _ref = pluginspath;
        _len = _ref.length;
        _i = 0;
        _results = [];
        _while = function(__iced_k) {
          var _break, _continue, _next;
          _break = function() {
            return __iced_k(_results);
          };
          _continue = function() {
            return iced.trampoline(function() {
              ++_i;
              return _while(__iced_k);
            });
          };
          _next = function(__iced_next_arg) {
            _results.push(__iced_next_arg);
            return _continue();
          };
          if (!(_i < _len)) {
            return _break();
          } else {
            directory = _ref[_i];
            directorypath = path.join(__dirname, directory);
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/Users/tcoats/Source/odo/plugins.coffee",
                funcname: "loadplugins"
              });
              control.parseforplugins(directorypath, __iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    return plugins = arguments[0];
                  };
                })(),
                lineno: 16
              }));
              __iced_deferrals._fulfill();
            })(function() {
              var _j, _len1;
              if (typeof plugins !== "undefined" && plugins !== null) {
                for (_j = 0, _len1 = plugins.length; _j < _len1; _j++) {
                  plugin = plugins[_j];
                  control.root.push(plugin);
                }
              }
              return _next();
            });
          }
        };
        _while(__iced_k);
      })(function() {
        return cb();
      });
    },
    parseforplugins: function(pluginspath, cb) {
      var directoryfile, directoryfiles, err, exists, plugins, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      plugins = [];
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "/Users/tcoats/Source/odo/plugins.coffee",
          funcname: "parseforplugins"
        });
        fs.exists(pluginspath, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              return exists = arguments[0];
            };
          })(),
          lineno: 27
        }));
        __iced_deferrals._fulfill();
      })(function() {
        if (!exists) {
          cb(null);
          return;
        }
        (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/tcoats/Source/odo/plugins.coffee",
            funcname: "parseforplugins"
          });
          fs.readdir(pluginspath, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                err = arguments[0];
                return directoryfiles = arguments[1];
              };
            })(),
            lineno: 33
          }));
          __iced_deferrals._fulfill();
        })(function() {
          (function(__iced_k) {
            var _fn, _i, _len;
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/Users/tcoats/Source/odo/plugins.coffee",
              funcname: "parseforplugins"
            });
            _fn = function(autocb) {
              var plugin, pluginfile, ___iced_passed_deferral1, __iced_deferrals, __iced_k,
                _this = this;
              __iced_k = autocb;
              ___iced_passed_deferral1 = iced.findDeferral(arguments);
              pluginfile = path.join(pluginspath, directoryfile);
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral1,
                  filename: "/Users/tcoats/Source/odo/plugins.coffee",
                  funcname: "_fn"
                });
                control.parseplugin(pluginfile, __iced_deferrals.defer({
                  assign_fn: (function() {
                    return function() {
                      return plugin = arguments[0];
                    };
                  })(),
                  lineno: 38
                }));
                __iced_deferrals._fulfill();
              })(function() {
                if (typeof plugin !== "undefined" && plugin !== null) {
                  autocb(plugins.push(plugin));
                  return;
                }
                autocb();
                return;
              });
            };
            for (_i = 0, _len = directoryfiles.length; _i < _len; _i++) {
              directoryfile = directoryfiles[_i];
              _fn(__iced_deferrals.defer({
                lineno: 39
              }));
            }
            __iced_deferrals._fulfill();
          })(function() {
            return cb(plugins);
          });
        });
      });
    },
    parseplugin: function(pluginpath, cb) {
      var configfile, err, exists, plugin, pluginfile, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      pluginfile = path.basename(pluginpath);
      plugin = {
        id: encodeURIComponent(pluginfile),
        filename: pluginfile,
        path: pluginpath
      };
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "/Users/tcoats/Source/odo/plugins.coffee",
          funcname: "parseplugin"
        });
        fs.stat(plugin.path, __iced_deferrals.defer({
          assign_fn: (function(__slot_1) {
            return function() {
              err = arguments[0];
              return __slot_1.stat = arguments[1];
            };
          })(plugin),
          lineno: 56
        }));
        __iced_deferrals._fulfill();
      })(function() {
        if (!plugin.stat.isDirectory()) {
          cb(null);
          return;
        }
        plugin.configpath = path.join(plugin.path, 'plugin.json');
        (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/tcoats/Source/odo/plugins.coffee",
            funcname: "parseplugin"
          });
          fs.exists(plugin.configpath, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return exists = arguments[0];
              };
            })(),
            lineno: 63
          }));
          __iced_deferrals._fulfill();
        })(function() {
          if (!exists) {
            cb(null);
            return;
          }
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/Users/tcoats/Source/odo/plugins.coffee",
              funcname: "parseplugin"
            });
            fs.readFile(plugin.configpath, 'utf-8', __iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  err = arguments[0];
                  return configfile = arguments[1];
                };
              })(),
              lineno: 71
            }));
            __iced_deferrals._fulfill();
          })(function() {
            plugin.config = JSON.parse(configfile);
            plugin.pluginpath = path.normalize(path.join(plugin.path, plugin.config.main));
            if (plugin.config.disabled !== true) {
              plugin.implementation = require(plugin.pluginpath);
            }
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/Users/tcoats/Source/odo/plugins.coffee",
                funcname: "parseplugin"
              });
              control.parseforplugins(plugin.path, __iced_deferrals.defer({
                assign_fn: (function(__slot_1) {
                  return function() {
                    return __slot_1.plugins = arguments[0];
                  };
                })(plugin),
                lineno: 81
              }));
              __iced_deferrals._fulfill();
            })(function() {
              return cb(plugin);
            });
          });
        });
      });
    },
    configure: function(app, cb) {
      var ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "/Users/tcoats/Source/odo/plugins.coffee",
          funcname: "configure"
        });
        control.configureplugins(app, control.root, __iced_deferrals.defer({
          lineno: 85
        }));
        __iced_deferrals._fulfill();
      })(function() {
        return cb();
      });
    },
    configureplugins: function(app, plugins, cb) {
      var plugin, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      (function(__iced_k) {
        var _fn, _i, _len;
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "/Users/tcoats/Source/odo/plugins.coffee",
          funcname: "configureplugins"
        });
        _fn = function(autocb) {
          var ___iced_passed_deferral1, __iced_deferrals, __iced_k, _ref,
            _this = this;
          __iced_k = autocb;
          ___iced_passed_deferral1 = iced.findDeferral(arguments);
          if (((_ref = plugin.implementation) != null ? _ref.configure : void 0) != null) {
            plugin.implementation.configure(app);
          }
          if (plugin.plugins != null) {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral1,
                filename: "/Users/tcoats/Source/odo/plugins.coffee",
                funcname: "_fn"
              });
              control.configureplugins(app, plugin.plugins, __iced_deferrals.defer({
                lineno: 96
              }));
              __iced_deferrals._fulfill();
            })(__iced_k);
          } else {
            return __iced_k();
          }
        };
        for (_i = 0, _len = plugins.length; _i < _len; _i++) {
          plugin = plugins[_i];
          _fn(__iced_deferrals.defer({
            lineno: 97
          }));
        }
        __iced_deferrals._fulfill();
      })(function() {
        return cb();
      });
    },
    init: function(app, cb) {
      var ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "/Users/tcoats/Source/odo/plugins.coffee",
          funcname: "init"
        });
        control.initplugins(app, control.root, __iced_deferrals.defer({
          lineno: 102
        }));
        __iced_deferrals._fulfill();
      })(function() {
        return cb();
      });
    },
    initplugins: function(app, plugins, cb) {
      var plugin, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      (function(__iced_k) {
        var _fn, _i, _len;
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "/Users/tcoats/Source/odo/plugins.coffee",
          funcname: "initplugins"
        });
        _fn = function(autocb) {
          var ___iced_passed_deferral1, __iced_deferrals, __iced_k, _ref,
            _this = this;
          __iced_k = autocb;
          ___iced_passed_deferral1 = iced.findDeferral(arguments);
          if (((_ref = plugin.implementation) != null ? _ref.init : void 0) != null) {
            plugin.implementation.init(app);
          }
          if (plugin.plugins != null) {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral1,
                filename: "/Users/tcoats/Source/odo/plugins.coffee",
                funcname: "_fn"
              });
              control.initplugins(app, plugin.plugins, __iced_deferrals.defer({
                lineno: 113
              }));
              __iced_deferrals._fulfill();
            })(__iced_k);
          } else {
            return __iced_k();
          }
        };
        for (_i = 0, _len = plugins.length; _i < _len; _i++) {
          plugin = plugins[_i];
          _fn(__iced_deferrals.defer({
            lineno: 114
          }));
        }
        __iced_deferrals._fulfill();
      })(function() {
        return cb();
      });
    }
  };

  module.exports = control;

}).call(this);
