// Generated by IcedCoffeeScript 1.4.0c
(function() {
  var whatisit, _;

  _ = require('underscore');

  whatisit = function(thing) {
    var key, test, tests;
    tests = {
      array: _.isArray,
      "arguments": _.isArguments,
      "function": _.isFunction,
      string: _.isString,
      number: _.isNumber,
      boolean: _.isBoolead,
      date: _.isDate,
      regex: _.isRegEx,
      "null": _.isNull,
      undefined: _.isUndefined
    };
    if (_.isObject(thing)) return thing.constructor.name;
    for (key in tests) {
      test = tests[key];
      if (test(thing)) return key;
    }
    return 'unknown';
  };

  module.exports = {
    init: function(app) {
      app.get("/%CF%88/inject/", function(req, res) {
        var items, key;
        res.locals.bindings = (function() {
          var _ref, _results;
          _ref = app.inject.bindings;
          _results = [];
          for (key in _ref) {
            items = _ref[key];
            _results.push({
              key: key,
              count: items.length
            });
          }
          return _results;
        })();
        return res.render({
          view: 'admin/layout',
          data: {
            title: 'Ψ -> Fetching strategies',
            bodyclasses: ['prompt']
          },
          partials: {
            content: 'inject/inject'
          }
        });
      });
      return app.get("/%CF%88/inject/:key", function(req, res) {
        res.locals.binding = {
          key: req.params.key
        };
        console.log(whatisit.params());
        res.locals.binding.values = app.inject.bindings[req.params.key].map(function(binding) {
          var result;
          result = {
            type: whatisit(binding)
          };
          if (_.isObject(binding)) result.keys = _(binding).keys();
          if (_.isFunction(binding)) result.keys = binding.params();
          if (result.type === 'Function') result.keys = binding.params();
          return result;
        });
        return res.render({
          view: 'admin/layout',
          data: {
            title: "Ψ -> Fetching strategies -> " + req.params.key,
            bodyclasses: ['prompt']
          },
          partials: {
            content: 'inject/binding'
          }
        });
      });
    }
  };

}).call(this);
