// Generated by IcedCoffeeScript 1.6.3-g
(function() {


  define(['redis', 'eventstore', 'eventstore.redis', 'odo/injectinto'], function(redis, eventstore, storage, inject) {
    return {
      start: function() {
        var context, es, subscriber;
        es = eventstore.createStore();
        es.configure(function() {
          var publisher;
          publisher = redis.createClient();
          es.use({
            publish: function(event) {
              console.log('Publishing event to redis:');
              console.log(event);
              return publisher.publish('events', JSON.stringify(event, null, 4));
            }
          });
          return es.use(storage.createStorage());
        }).start();
        context = {
          applyHistoryThenCommand: function(aggregate, command) {
            return es.getEventStream(aggregate.id, function(err, stream) {
              console.log("Apply existing events " + stream.events.length);
              aggregate.loadFromHistory(stream.events);
              console.log("Apply command " + command.command + " to aggregate");
              return aggregate[command.command](command.payload, function(err, uncommitted) {
                var event, _i, _len;
                if (err) {
                  console.log(err);
                  return;
                }
                for (_i = 0, _len = uncommitted.length; _i < _len; _i++) {
                  event = uncommitted[_i];
                  stream.addEvent(event);
                }
                return stream.commit();
              });
            });
          }
        };
        subscriber = redis.createClient();
        subscriber.on('message', function(channel, message) {
          var command, handler;
          command = JSON.parse(message);
          console.log('Received command from redis:');
          console.log(command);
          handler = inject.oneornone("commandhandler:" + command.command);
          if (handler == null) {
            console.log("Could not find a command handler for " + command.command + ", this is an error!");
            return;
          }
          return handler(command, context);
        });
        return subscriber.subscribe('commands');
      }
    };
  });

}).call(this);
