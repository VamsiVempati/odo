// Generated by IcedCoffeeScript 1.6.3-g
(function() {


  define(['node-uuid'], function(uuid) {
    var Item;
    return Item = (function() {
      function Item(id) {
        this.id = id;
        this.text = '';
        this._destroy = false;
        this.uncommittedEvents = [];
        this;
      }

      Item.prototype.createItem = function(command, callback) {
        if (command.text === '') {
          return callback(new Error('It is not allowed to set an item text to empty string.'));
        } else {
          this.apply({
            id: uuid.v1(),
            time: new Date(),
            payload: {
              id: this.id,
              text: command.text
            },
            event: 'itemCreated'
          });
          return callback(null, this.uncommittedEvents);
        }
      };

      Item.prototype.changeItem = function(command, callback) {
        if (command.text === '') {
          return callback(new Error('It is not allowed to set an item text to empty string.'));
        } else {
          this.apply({
            id: uuid.v1(),
            time: new Date(),
            payload: {
              id: this.id,
              text: command.text
            },
            event: 'itemChanged'
          });
          return callback(null, this.uncommittedEvents);
        }
      };

      Item.prototype.deleteItem = function(command, callback) {
        this.apply({
          id: uuid.v1(),
          time: new Date(),
          payload: {
            id: this.id,
            text: this.text
          },
          event: 'itemDeleted'
        });
        return callback(null, this.uncommittedEvents);
      };

      Item.prototype.apply = function(event) {
        this['_' + event.event](event);
        if (!event.fromHistory) {
          return this.uncommittedEvents.push(event);
        }
      };

      Item.prototype._itemCreated = function(event) {
        return this.text = event.payload.text;
      };

      Item.prototype._itemChanged = function(event) {
        return this.text = event.payload.text;
      };

      Item.prototype._itemDeleted = function(event) {
        return this._destroy = true;
      };

      Item.prototype.loadFromHistory = function(history) {
        var event, _i, _len, _results;
        _results = [];
        for (_i = 0, _len = history.length; _i < _len; _i++) {
          event = history[_i];
          event.payload.fromHistory = true;
          _results.push(this.apply(event.payload));
        }
        return _results;
      };

      return Item;

    })();
  });

}).call(this);
