// Generated by CoffeeScript 1.6.3
(function() {
  define(['jquery', 'q'], function($, Q) {
    var cache,
      _this = this;
    cache = null;
    return {
      getUser: function() {
        var dfd;
        dfd = Q.defer();
        if (_this.cache != null) {
          dfd.resolve(_this.cache);
        } else {
          Q($.get('/odo/auth/user')).then(function(data) {
            _this.cache = data;
            return dfd.resolve(data);
          }).fail(function() {
            return dfd.reject();
          });
        }
        return dfd.promise;
      },
      assignUsernameToUser: function(id, username) {
        return Q($.post('/sendcommand/assignUsernameToUser', {
          id: id,
          username: username
        }));
      },
      assignDisplayNameToUser: function(id, displayName) {
        return Q($.post('/sendcommand/assignDisplayNameToUser', {
          id: id,
          displayName: displayName
        }));
      },
      createVerifyEmailAddressToken: function(email) {
        return Q($.post('/odo/auth/verifyemail', {
          email: email
        }));
      },
      checkEmailVerificationToken: function(email, token) {
        return Q($.get('/odo/auth/checkemailverificationtoken', {
          email: email,
          token: token
        }));
      },
      assignEmailAddressToUserWithToken: function(email, token) {
        return Q($.post('/odo/auth/emailverified', {
          email: email,
          token: token
        }));
      },
      getUsernameAvailability: function(username) {
        return Q($.get('/odo/auth/local/usernameavailability', {
          username: username
        }));
      },
      testAuthentication: function(username, password) {
        return Q($.get('/odo/auth/local/test', {
          username: username,
          password: password
        }));
      },
      assignPasswordToUser: function(id, password) {
        return Q($.post('/sendcommand/assignPasswordToUser', {
          id: id,
          password: password
        }));
      },
      disconnectTwitterFromUser: function(id, profile) {
        return Q($.post('/sendcommand/disconnectTwitterFromUser', {
          id: id,
          profile: profile
        }));
      },
      disconnectFacebookFromUser: function(id, profile) {
        return Q($.post('/sendcommand/disconnectFacebookFromUser', {
          id: id,
          profile: profile
        }));
      },
      disconnectGoogleFromUser: function(id, profile) {
        return Q($.post('/sendcommand/disconnectGoogleFromUser', {
          id: id,
          profile: profile
        }));
      },
      removeLocalSigninForUser: function(id, profile) {
        return Q($.post('/sendcommand/removeLocalSigninForUser', {
          id: id,
          profile: profile
        }));
      },
      forgotCheckEmailAddress: function(email) {
        return Q($.get('/odo/auth/forgot', {
          email: email
        }));
      },
      createPasswordResetToken: function(email) {
        return Q($.post('/odo/auth/local/resettoken', {
          email: email
        }));
      },
      checkResetToken: function(token) {
        return Q($.get('/odo/auth/local/resettoken', {
          token: token
        }));
      },
      resetPasswordWithToken: function(token, password) {
        return Q($.post('/odo/auth/local/reset', {
          token: token,
          password: password
        }));
      }
    };
  });

}).call(this);
