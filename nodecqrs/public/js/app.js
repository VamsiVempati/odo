// Generated by IcedCoffeeScript 1.6.3-g
(function() {


  (function() {
    var IndexView, Item, ItemView, Items, app, editItemTemplate, init, itemChangedHandler, itemCreateHandler, itemDeletedHandler, itemTemplate, items, socket;
    Item = Backbone.Model.extend({
      modelName: 'item',
      initialize: function() {
        return this.bindCQRS();
      }
    });
    Items = Backbone.Collection.extend({
      model: Item,
      url: '/allItems.json'
    });
    items = new Items();
    Backbone.CQRS.hub.init({
      eventNameAttr: 'event'
    });
    Backbone.sync = Backbone.CQRS.sync;
    socket = io.connect('http://localhost:3000');
    socket.on('events', function(evt) {
      return Backbone.CQRS.hub.emit('events', evt);
    });
    Backbone.CQRS.hub.on('commands', function(cmd) {
      return socket.emit('commands', cmd);
    });
    itemCreateHandler = new Backbone.CQRS.EventDenormalizer({
      methode: 'create',
      model: Item,
      collection: items,
      forModel: 'item',
      forEvent: 'itemCreated'
    });
    itemChangedHandler = new Backbone.CQRS.EventDenormalizer({
      forModel: 'item',
      forEvent: 'itemChanged'
    });
    itemDeletedHandler = new Backbone.CQRS.EventDenormalizer({
      methode: 'delete',
      forModel: 'item',
      forEvent: 'itemDeleted'
    });
    itemTemplate = _.template("<%= text %> <a class=\"deleteItem\" href=\"\">delete</a> <a class=\"editItem\" href=\"\">edit</a>");
    editItemTemplate = _.template("<input id=\"newText\" type=\"text\" value=\"<%= text %>\"></input><button id=\"changeItem\">save</button>");
    ItemView = Backbone.View.extend({
      tagName: 'li',
      className: 'item',
      initialize: function() {
        this.model.bind('change', this.render, this);
        return this.model.bind('destroy', this.remove, this);
      },
      events: {
        'click .editItem': 'uiEditItem',
        'click .deleteItem': 'uiDeleteItem',
        'click #changeItem': 'uiChangeItem'
      },
      uiEditItem: function(e) {
        e.preventDefault();
        this.model.editMode = true;
        return this.render();
      },
      uiDeleteItem: function(e) {
        var cmd;
        e.preventDefault();
        cmd = new Backbone.CQRS.Command({
          id: _.uniqueId('msg'),
          command: 'deleteItem',
          payload: {
            id: this.model.id
          }
        });
        return cmd.emit();
      },
      uiChangeItem: function(e) {
        var cmd, itemText;
        e.preventDefault();
        itemText = this.$('#newText').val();
        this.$('#newText').val("");
        this.model.editMode = false;
        this.render();
        if (itemText) {
          cmd = new Backbone.CQRS.Command({
            id: _.uniqueId('msg'),
            command: 'changeItem',
            payload: {
              id: this.model.id,
              text: itemText
            }
          });
          return cmd.emit();
        }
      },
      render: function() {
        if (this.model.editMode) {
          $(this.el).html(editItemTemplate(this.model.toJSON()));
        } else {
          $(this.el).html(itemTemplate(this.model.toJSON()));
        }
        return this;
      },
      remove: function() {
        return $(this.el).fadeOut('slow');
      }
    });
    IndexView = Backbone.View.extend({
      el: '#index-view',
      initialize: function() {
        _.bindAll(this, 'addItem');
        this.collection = app.items;
        this.collection.bind('reset', this.render, this);
        return this.collection.bind('add', this.addItem, this);
      },
      events: {
        'click #addItem': 'uiAddItem'
      },
      uiAddItem: function(e) {
        var cmd, itemText;
        e.preventDefault();
        itemText = this.$('#newItemText').val();
        if (itemText) {
          cmd = new Backbone.CQRS.Command({
            id: _.uniqueId('msg'),
            command: 'createItem',
            payload: {
              text: itemText
            }
          });
          cmd.emit();
        }
        return this.$('#newItemText').val('');
      },
      render: function() {
        return this.collection.each(this.addItem);
      },
      addItem: function(item) {
        var view;
        view = new ItemView({
          model: item
        });
        return this.$('#items').append(view.render().el);
      }
    });
    app = {};
    init = function() {
      var indexView;
      app.items = items;
      app.items.fetch();
      indexView = new IndexView();
      return indexView.render();
    };
    return $(init);
  })();

}).call(this);
