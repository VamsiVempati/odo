// Generated by CoffeeScript 1.6.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  define([], function() {
    var Item;
    return Item = (function() {
      function Item(id) {
        this._itemDeleted = __bind(this._itemDeleted, this);
        this._itemChanged = __bind(this._itemChanged, this);
        this._itemCreated = __bind(this._itemCreated, this);
        this.deleteItem = __bind(this.deleteItem, this);
        this.changeItem = __bind(this.changeItem, this);
        this.createItem = __bind(this.createItem, this);
        this.id = id;
        this.text = '';
        this._destroy = false;
        this;
      }

      Item.prototype.createItem = function(command, callback) {
        if (command.text === '') {
          callback(new Error('It is not allowed to set an item text to empty string.'));
          return;
        }
        this["new"]('itemCreated', {
          id: this.id,
          text: command.text
        });
        return callback(null);
      };

      Item.prototype.changeItem = function(command, callback) {
        if (command.text === '') {
          callback(new Error('It is not allowed to set an item text to empty string.'));
          return;
        }
        this["new"]('itemChanged', {
          id: this.id,
          text: command.text
        });
        return callback(null);
      };

      Item.prototype.deleteItem = function(command, callback) {
        this["new"]('itemDeleted', {
          id: this.id
        });
        return callback(null);
      };

      Item.prototype._itemCreated = function(event) {
        return this.text = event.payload.text;
      };

      Item.prototype._itemChanged = function(event) {
        return this.text = event.payload.text;
      };

      Item.prototype._itemDeleted = function(event) {
        return this._destroy = true;
      };

      return Item;

    })();
  });

}).call(this);
