// Generated by CoffeeScript 1.6.3
(function() {
  define(['redis', 'odo/infra/config', 'odo/infra/sequencer'], function(redis, config, Sequencer) {
    var commandreceiver, commandsender, ensequence, eventlistener, eventpublisher, eventsequencer, handlers, listeners, result, subscriptions;
    commandsender = redis.createClient();
    eventpublisher = redis.createClient();
    subscriptions = [];
    listeners = {};
    handlers = {};
    result = {
      print: function() {
        var event, list, listener, _results;
        _results = [];
        for (event in listeners) {
          list = listeners[event];
          _results.push((function() {
            var _i, _len, _results1;
            _results1 = [];
            for (_i = 0, _len = list.length; _i < _len; _i++) {
              listener = list[_i];
              console.log("" + event + " ->");
              _results1.push(console.log(listener.toString()));
            }
            return _results1;
          })());
        }
        return _results;
      },
      send: function(command) {
        console.log("" + command.command + " -> redis");
        command = JSON.stringify(command, null, 4);
        return commandsender.publish("" + config.odo.domain + ".commands", command);
      },
      handle: function(command, callback) {
        console.log(" -> " + command);
        if (handlers[command] != null) {
          console.log("Error, handler already set for " + command);
          return;
        }
        return handlers[command] = callback;
      },
      publish: function(event) {
        console.log("" + event.event + " -> redis");
        return eventpublisher.publish("" + config.odo.domain + ".events", JSON.stringify(event, null, 4));
      },
      receive: function(event, callback) {
        console.log(" -> " + event);
        if (listeners[event] == null) {
          listeners[event] = [];
        }
        return listeners[event].push(callback);
      },
      eventstream: function(callback) {
        console.log(" -> eventstream");
        return subscriptions.push(callback);
      }
    };
    commandreceiver = redis.createClient();
    commandreceiver.on('message', function(channel, command) {
      command = JSON.parse(command);
      if (handlers[command.command] != null) {
        console.log("" + command.command + " ->");
        return handlers[command.command](command);
      }
    });
    commandreceiver.subscribe("" + config.odo.domain + ".commands");
    eventlistener = redis.createClient();
    eventsequencer = new Sequencer();
    ensequence = function(event, listener) {
      return eventsequencer.push(function(cb) {
        return listener(event, cb);
      });
    };
    eventlistener.on('message', function(channel, event) {
      var listener, subscriber, _i, _j, _len, _len1, _ref, _results;
      event = JSON.parse(event);
      for (_i = 0, _len = subscriptions.length; _i < _len; _i++) {
        subscriber = subscriptions[_i];
        ensequence(event, subscriber);
      }
      if (listeners[event.event] != null) {
        _ref = listeners[event.event];
        _results = [];
        for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
          listener = _ref[_j];
          console.log("" + event.event + " ->");
          _results.push(ensequence(event, listener));
        }
        return _results;
      }
    });
    eventlistener.subscribe("" + config.odo.domain + ".events");
    return result;
  });

}).call(this);
