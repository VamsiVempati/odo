// Generated by IcedCoffeeScript 1.4.0c
(function() {
  var express, expressutils, iced, parse, parseUrl, __iced_k, __iced_k_noop;

  iced = require('iced-coffee-script').iced;
  __iced_k = __iced_k_noop = function() {};

  express = require('express');

  expressutils = require('express/lib/utils');

  parse = require('url').parse;

  parseUrl = function(req) {
    var parsed;
    parsed = req._parsedUrl;
    if (parsed && parsed.href === req.url) {
      return parsed;
    } else {
      return req._parsedUrl = parse(req.url);
    }
  };

  module.exports = {
    configure: function(app) {
      var method, peeks, register, _fn, _i, _len, _ref;
      peeks = [];
      register = function(method, path, callback) {
        var peek;
        peek = {
          path: path,
          method: method,
          callback: callback,
          keys: []
        };
        peek.regexp = expressutils.pathRegexp(peek.path, peek.keys, false, false);
        return peeks.push(peek);
      };
      app.peek = {};
      _ref = ['get', 'post', 'put', 'delete'];
      _fn = function(method) {
        return app.peek[method] = function(path, callback) {
          return register(method, path, callback);
        };
      };
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        method = _ref[_i];
        _fn(method);
      }
      return app.use(function(req, res, next) {
        var i, key, len, m, path, peek, url, val, ___iced_passed_deferral, __iced_deferrals, __iced_k,
          _this = this;
        __iced_k = __iced_k_noop;
        ___iced_passed_deferral = iced.findDeferral(arguments);
        method = req.method.toLowerCase();
        url = parseUrl(req);
        path = url.pathname;
        (function(__iced_k) {
          var _j, _len1;
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/tcoats/Source/odo/framework/peek/peek.coffee"
          });
          for (_j = 0, _len1 = peeks.length; _j < _len1; _j++) {
            peek = peeks[_j];
            req.params = [];
            m = peek.regexp.exec(path);
            if (!m) continue;
            if (peek.method !== req.method.toLowerCase()) continue;
            i = 1;
            len = m.length;
            while (i < len) {
              key = peek.keys[i - 1];
              val = ("string" === typeof m[i] ? decodeURIComponent(m[i]) : m[i]);
              if (key) {
                req.params[key.name] = val;
              } else {
                req.params.push(val);
              }
              ++i;
            }
            peek.callback(req, res, __iced_deferrals.defer({
              lineno: 61
            }));
          }
          __iced_deferrals._fulfill();
        })(function() {
          return next();
        });
      });
    }
  };

}).call(this);
