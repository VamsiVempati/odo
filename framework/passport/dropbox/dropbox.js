// Generated by IcedCoffeeScript 1.4.0c
(function() {
  var DropboxStrategy, dropbox, express, passport, _;

  express = require('express');

  passport = require('passport');

  dropbox = require('dropbox');

  DropboxStrategy = require('passport-dropbox').Strategy;

  _ = require('underscore');

  module.exports = {
    configure: function(app) {
      passport.serializeUser(function(user, done) {
        return done(null, user);
      });
      passport.deserializeUser(function(obj, done) {
        return done(null, obj);
      });
      passport.use(new DropboxStrategy({
        consumerKey: app.get('dropbox key'),
        consumerSecret: app.get('dropbox secret'),
        callbackURL: app.get('dropbox callback')
      }, function(token, tokenSecret, profile, done) {
        return done(null, _.extend(profile, {
          token: token,
          tokenSecret: tokenSecret
        }));
      }));
      app.ensureAuth = function(req, res, next) {
        if (req.isAuthenticated()) return next();
        return res.redirect(app.get('dropbox fail'));
      };
      return app.inject.bind('dropbox.client', function() {
        var req;
        req = app.inject.one('req');
        if (req.user == null) return null;
        return new dropbox.Client({
          key: app.get('dropbox key'),
          secret: app.get('dropbox secret'),
          token: req.user.token,
          tokenSecret: req.user.tokenSecret,
          uid: req.user._json.uid
        });
      });
    },
    init: function(app) {
      app.get('/auth/dropbox', passport.authenticate('dropbox'), function(req, res) {});
      app.get('/auth/dropbox/callback', passport.authenticate('dropbox', {
        failureRedirect: app.get('dropbox fail')
      }), function(req, res) {
        return res.redirect(app.get('dropbox sign-in'));
      });
      return app.get('/auth/dropbox/sign-out', function(req, res) {
        req.logout();
        return res.redirect(app.get('dropbox sign-out'));
      });
    }
  };

}).call(this);
