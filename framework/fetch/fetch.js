// Generated by IcedCoffeeScript 1.4.0c
(function() {
  var Fetch, _;

  _ = require('underscore');

  Fetch = (function() {

    function Fetch() {
      this.strategies = {};
    }

    Fetch.prototype.bind = function(fetch, spec, implementation) {
      if (this.strategies[fetch] == null) this.strategies[fetch] = {};
      if (this.strategies[fetch][spec] != null) {
        throw new Error("Existing implementation for " + fetch + "->" + spec);
      }
      return this.strategies[fetch][spec] = implementation;
    };

    Fetch.prototype.getAll = function() {
      return this.strategies;
    };

    Fetch.prototype.get = function(fetch, spec) {
      var _ref, _ref1;
      return (_ref = this.strategies) != null ? (_ref1 = _ref[fetch]) != null ? _ref1[spec] : void 0 : void 0;
    };

    Fetch.prototype.exec = function(fetch, spec, app, params, cb) {
      var implementation;
      implementation = this.get(fetch, spec);
      if (implementation == null) return null;
      return implementation(app, params, cb);
    };

    return Fetch;

  })();

  module.exports = {
    configure: function(app) {
      return app.fetch = new Fetch;
    },
    init: function(app) {
      var fetch, implementation, spec, specs, _ref, _results;
      _ref = app.fetch.getAll();
      _results = [];
      for (fetch in _ref) {
        specs = _ref[fetch];
        _results.push((function() {
          var _results1;
          _results1 = [];
          for (spec in specs) {
            implementation = specs[spec];
            _results1.push((function(app, fetch, spec, implementation) {
              return app.get("/fetch/" + fetch + "/" + spec, function(req, res) {
                return implementation(app, req.query, function(error, result) {
                  if (error != null) throw error;
                  return res.send(result);
                });
              });
            })(app, fetch, spec, implementation));
          }
          return _results1;
        })());
      }
      return _results;
    }
  };

}).call(this);
