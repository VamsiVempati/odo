// Generated by CoffeeScript 1.6.3
(function() {
  define(['knockout', 'jquery'], function(ko, $) {
    return {
      init: function(requirejs, config) {
        if (config.dialog) {
          requirejs(['plugins/dialog'], function(dialog) {
            return dialog.addContext('OdoDialog', {
              compositionComplete: function(child, parent, context) {
                var $child, $host, options, theDialog;
                $child = $(child);
                options = {
                  backdrop: 'static'
                };
                theDialog = dialog.getDialog(context.model);
                $host = $(theDialog.host);
                $host.modal(options);
                $host.one('shown.bs.modal', function() {
                  return $child.find('[autofocus],.autofocus').first().focus();
                });
                if ($child.hasClass('autoclose')) {
                  return $host.one('shown.bs.modal', function() {
                    return $host.one('click.dismiss.modal', function() {
                      return theDialog.close();
                    });
                  });
                }
              },
              addHost: function(theDialog) {
                var body, host;
                body = $('body');
                host = $('<div class="modal fade" id="odo-modal" tabindex="-1" role="dialog" aria-hidden="true">').appendTo(body);
                return theDialog.host = host.get(0);
              },
              removeHost: function(theDialog) {
                return $(theDialog.host).one('hidden.bs.modal', function() {
                  return ko.removeNode(theDialog.host);
                }).modal('hide');
              }
            });
          });
        }
        if (config.validation) {
          requirejs(['ko.validation'], function() {
            return ko.validation.configure({
              registerExtenders: true,
              parseInputAttributes: true,
              insertMessages: false,
              errorMessageClass: 'help-block',
              errorElementClass: 'has-error'
            });
          });
        }
        if (config.mousetrap) {
          requirejs(['mousetrap'], function(Mousetrap) {
            Mousetrap = (function(Mousetrap) {
              var _originalBind;
              _originalBind = Mousetrap.bind;
              Mousetrap.bind = function(keys, originalCallback, action) {
                var callback, handle, isBound;
                isBound = true;
                handle = {
                  unbind: function() {
                    return isBound = false;
                  },
                  bind: function() {
                    return isBound = true;
                  }
                };
                callback = function() {
                  if (!isBound) {
                    return;
                  }
                  return originalCallback.apply(this, arguments);
                };
                _originalBind(keys, callback, action);
                return handle;
              };
              return Mousetrap;
            })(Mousetrap);
            Mousetrap.stopCallback = function(e, element, combo) {
              var $element;
              $element = $(element);
              if ($element.hasClass('mousetrap-yes')) {
                return false;
              }
              if ($element.hasClass('mousetrap-yes-' + combo)) {
                return false;
              }
              return element.tagName === 'INPUT' || element.tagName === 'SELECT' || element.tagName === 'TEXTAREA' || (element.contentEditable && element.contentEditable === 'true');
            };
            return ko.bindingHandlers.shortcuts = {
              init: function(element, valueAccessor) {
                var handler, handles, key, shortcuts, wrap;
                wrap = function(handler, key) {
                  return function() {
                    handler(key);
                    return false;
                  };
                };
                shortcuts = ko.unwrap(valueAccessor());
                handles = [];
                for (key in shortcuts) {
                  handler = shortcuts[key];
                  handles.push(Mousetrap.bind(key, wrap(handler, key)));
                }
                return ko.utils.domNodeDisposal.addDisposeCallback(element, function() {
                  var handle, _i, _len, _results;
                  _results = [];
                  for (_i = 0, _len = handles.length; _i < _len; _i++) {
                    handle = handles[_i];
                    _results.push(handle.unbind());
                  }
                  return _results;
                });
              }
            };
          });
        }
        if (config.q) {
          requirejs(['durandal/system', 'q'], function(system, Q) {
            return system.defer = function(action) {
              var deferred, promise;
              deferred = Q.defer();
              action.call(deferred, deferred);
              promise = deferred.promise;
              deferred.promise = function() {
                return promise;
              };
              return deferred;
            };
          });
        }
        if (config.bootstrap) {
          ko.bindingHandlers.popover = {
            init: function(element, valueAccessor) {
              var options;
              options = ko.unwrap(valueAccessor());
              return $(element).popover(options);
            }
          };
        }
        if (config.marked) {
          return requirejs(['marked'], function(marked) {
            return ko.bindingHandlers.marked = {
              init: function() {
                return {
                  'controlsDescendantBindings': true
                };
              },
              update: function(element, valueAccessor) {
                return ko.utils.setHtml(element, marked(ko.utils.unwrapObservable(valueAccessor())));
              }
            };
          });
        }
      }
    };
  });

}).call(this);
