// Generated by CoffeeScript 1.6.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  define(['module', 'passport', 'odo/config', 'redis', 'odo/projections/userprofile'], function(module, passport, config, redis, UserProfile) {
    var Auth, db;
    db = redis.createClient();
    return Auth = (function() {
      function Auth() {
        this.init = __bind(this.init, this);
        this.configure = __bind(this.configure, this);
        var _this = this;
        this.receive = {
          userHasEmailAddress: function(event, cb) {
            return db.hset("" + config.odo.domain + ":useremail", event.payload.email, event.payload.id, function() {
              return cb();
            });
          }
        };
      }

      Auth.prototype.configure = function(app) {
        app.route('/odo', app.modulepath(module.uri) + '/auth-public');
        app.use(passport.initialize());
        app.use(passport.session());
        passport.serializeUser(function(user, done) {
          return done(null, user.id);
        });
        return passport.deserializeUser(function(id, done) {
          return new UserProfile().get(id, done);
        });
      };

      Auth.prototype.init = function(app) {
        var _this = this;
        app.get('/odo/auth/signout', function(req, res) {
          req.logout();
          return res.redirect('/');
        });
        app.get('/odo/auth/user', function(req, res) {
          if (req.user == null) {
            res.send(403, 'authentication required');
            return;
          }
          return res.send(req.user);
        });
        return app.get('/odo/auth/forgot', function(req, res) {
          if (req.query.email == null) {
            res.send(400, 'Email address required');
            return;
          }
          return db.hget("" + config.odo.domain + ":useremail", req.query.email, function(err, userid) {
            if (err != null) {
              console.log(err);
              res.send(500, 'Woops');
              return;
            }
            if (userid == null) {
              res.send({
                message: 'No account found for this email address'
              });
              return;
            }
            return new UserProfile().get(userid, function(err, user) {
              if (err != null) {
                res.send(500, 'Couldn\'t find user');
                return;
              }
              return res.send({
                local: user.local != null,
                facebook: user.facebook != null,
                google: user.google != null,
                twitter: user.twitter != null,
                username: user.username != null
              });
            });
          });
        });
      };

      return Auth;

    })();
  });

}).call(this);
