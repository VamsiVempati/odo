// Generated by CoffeeScript 1.6.3
(function() {
  define(['module', 'passport', 'passport-twitter', 'odo/config', 'odo/hub', 'node-uuid', 'odo/projections/userprofile', 'odo/projections/usertwitter'], function(module, passport, passporttwitter, config, hub, uuid, UserProfile, UserTwitter) {
    return {
      configure: function(app) {
        app.route('/odo', app.modulepath(module.uri) + '/auth-public');
        app.use(passport.initialize());
        app.use(passport.session());
        passport.use(new passporttwitter.Strategy({
          consumerKey: config.passport.twitter['consumer key'],
          consumerSecret: config.passport.twitter['consumer secret'],
          callbackURL: config.passport.twitter['host'] + '/auth/twitter/callback',
          passReqToCallback: true
        }, function(req, token, tokenSecret, profile, done) {
          var userid;
          userid = null;
          if (req.user != null) {
            console.log('user already exists, using it\'s id');
            userid = req.user.id;
          }
          return new UserTwitter().get(profile.id, function(err, userid) {
            var user;
            if (err != null) {
              done(err);
              return;
            }
            if (userid == null) {
              console.log('no user exists yet, creating a new id');
              userid = uuid.v1();
              hub.send({
                command: 'startTrackingUser',
                payload: {
                  id: userid,
                  profile: profile
                }
              });
              console.log('attaching twitter to user');
              hub.send({
                command: 'attachTwitterToUser',
                payload: {
                  id: userid,
                  profile: profile
                }
              });
            }
            user = {
              id: userid,
              profile: profile
            };
            return done(null, user);
          });
        }));
        passport.serializeUser(function(user, done) {
          return done(null, user.id);
        });
        return passport.deserializeUser(function(id, done) {
          return new UserProfile().get(id, done);
        });
      },
      init: function(app) {
        app.get('/auth/twitter', passport.authenticate('twitter'));
        app.get('/auth/twitter/callback', passport.authenticate('twitter', {
          successRedirect: '/',
          failureRedirect: '/'
        }));
        app.get('/auth/signout', function(req, res) {
          req.logout();
          return res.redirect('/');
        });
        return app.get('/auth/user', function(req, res) {
          if (req.user == null) {
            res.send(403, 'authentication required');
            return;
          }
          return res.send(req.user);
        });
      }
    };
  });

}).call(this);
